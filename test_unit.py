#!/usr/bin/env python3
"""Unit-—Ç–µ—Å—Ç—ã –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""

import math_operations

def test_add():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ª–æ–∂–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–µ–Ω–∏–µ...")
    assert math_operations.add(2, 3) == 5, "2 + 3 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5"
    assert math_operations.add(-1, 1) == 0, "-1 + 1 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0"
    assert math_operations.add(0, 0) == 0, "0 + 0 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0"
    print("‚úÖ –°–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_subtract():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—á–∏—Ç–∞–Ω–∏–µ...")
    assert math_operations.subtract(5, 3) == 2, "5 - 3 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2"
    assert math_operations.subtract(10, 10) == 0, "10 - 10 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0"
    assert math_operations.subtract(0, 5) == -5, "0 - 5 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å -5"
    print("‚úÖ –í—ã—á–∏—Ç–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_multiply():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω–æ–∂–µ–Ω–∏–µ...")
    assert math_operations.multiply(2, 4) == 8, "2 * 4 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 8"
    assert math_operations.multiply(0, 100) == 0, "0 * 100 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0"
    assert math_operations.multiply(-2, 3) == -6, "-2 * 3 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å -6"
    print("‚úÖ –£–º–Ω–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_divide():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ–ª–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–ª–µ–Ω–∏–µ...")
    assert math_operations.divide(10, 2) == 5, "10 / 2 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5"
    assert math_operations.divide(9, 3) == 3, "9 / 3 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
    try:
        math_operations.divide(5, 0)
        assert False, "–î–µ–ª–∏—Ç–µ–ª—å 0 –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É"
    except ValueError as e:
        assert str(e) == "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ", "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
    print("‚úÖ –î–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_power():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å...")
    assert math_operations.power(2, 3) == 8, "2^3 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 8"
    assert math_operations.power(5, 0) == 1, "5^0 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1"
    assert math_operations.power(3, 2) == 9, "3^2 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 9"
    print("‚úÖ –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def run_unit_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö unit-—Ç–µ—Å—Ç–æ–≤"""
    print("=== –ó–ê–ü–£–°–ö UNIT-–¢–ï–°–¢–û–í ===")
    test_add()
    test_subtract()
    test_multiply()
    test_divide()
    test_power()
    print("üéâ –í–°–ï UNIT-–¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")

if __name__ == "__main__":
    run_unit_tests()
